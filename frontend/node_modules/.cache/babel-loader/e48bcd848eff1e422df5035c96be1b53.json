{"ast":null,"code":"const CryptoJS = require('ts.cryptojs256');\n/**\n * Default options for JWT signature\n */\n\n\nconst defaultHeader = {\n  alg: 'HS256',\n  typ: 'JWT'\n};\n/**\n * Return a base64 URL\n *\n * @param {string} data - some data to be base64 encoded\n * @return {string} A base64url encoded string\n */\n\nfunction base64url(data) {\n  return CryptoJS.enc.Base64.stringify(data).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\n * Create a very basic JWT signature\n *\n * @param {Object} data - the data object you want to have signed\n * @param {string} secret - secret to use to sign token with\n * @param {Object} options - JWT header options\n * @return {string} JSON Web Token that has been signed\n */\n\n\nfunction sign(data, secret, options = {}) {\n  const header = Object.assign(defaultHeader, options);\n\n  if (header.alg !== 'HS256' && header.typ !== 'JWT') {\n    throw new Error('jwt-encode only support the HS256 algorithm and the JWT type of hash');\n  }\n\n  const encodedHeader = encode(header);\n  const encodedData = encode(data);\n  let signature = `${encodedHeader}.${encodedData}`;\n  signature = CryptoJS.HmacSHA256(signature, secret);\n  signature = base64url(signature);\n  return `${encodedHeader}.${encodedData}.${signature}`;\n}\n/**\n *  Safely base64url encode a JS Object in a way that is UTF-8 safe\n *\n *  @param {Object} Javascript object payload to be encoded\n *  @return {string} utf-8 safe base64url encoded payload\n */\n\n\nfunction encode(data) {\n  const stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n  return base64url(stringifiedData);\n}\n\nmodule.exports = sign;","map":{"version":3,"sources":["/Users/qiuyutianwen/Documents/GitHub/BitCorner/frontend/node_modules/jwt-encode/src/index.js"],"names":["CryptoJS","require","defaultHeader","alg","typ","base64url","data","enc","Base64","stringify","replace","sign","secret","options","header","Object","assign","Error","encodedHeader","encode","encodedData","signature","HmacSHA256","stringifiedData","Utf8","parse","JSON","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;AAEA;AACA;AACA;;;AACA,MAAMC,aAAa,GAAG;AAAEC,EAAAA,GAAG,EAAE,OAAP;AAAgBC,EAAAA,GAAG,EAAE;AAArB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAON,QAAQ,CAACO,GAAT,CAAaC,MAAb,CACJC,SADI,CACMH,IADN,EAEJI,OAFI,CAEI,KAFJ,EAEW,EAFX,EAGJA,OAHI,CAGI,KAHJ,EAGW,GAHX,EAIJA,OAJI,CAII,KAJJ,EAIW,GAJX,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,CAAeL,IAAf,EAAqBM,MAArB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzC,QAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcd,aAAd,EAA6BW,OAA7B,CAAf;;AACA,MAAIC,MAAM,CAACX,GAAP,KAAe,OAAf,IAA0BW,MAAM,CAACV,GAAP,KAAe,KAA7C,EAAoD;AAClD,UAAM,IAAIa,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,QAAMC,aAAa,GAAGC,MAAM,CAACL,MAAD,CAA5B;AACA,QAAMM,WAAW,GAAGD,MAAM,CAACb,IAAD,CAA1B;AAEA,MAAIe,SAAS,GAAI,GAAEH,aAAc,IAAGE,WAAY,EAAhD;AACAC,EAAAA,SAAS,GAAGrB,QAAQ,CAACsB,UAAT,CAAoBD,SAApB,EAA+BT,MAA/B,CAAZ;AACAS,EAAAA,SAAS,GAAGhB,SAAS,CAACgB,SAAD,CAArB;AACA,SAAQ,GAAEH,aAAc,IAAGE,WAAY,IAAGC,SAAU,EAApD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,MAAT,CAAiBb,IAAjB,EAAuB;AACrB,QAAMiB,eAAe,GAAGvB,QAAQ,CAACO,GAAT,CAAaiB,IAAb,CAAkBC,KAAlB,CAAwBC,IAAI,CAACjB,SAAL,CAAeH,IAAf,CAAxB,CAAxB;AACA,SAAOD,SAAS,CAACkB,eAAD,CAAhB;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBjB,IAAjB","sourcesContent":["const CryptoJS = require('ts.cryptojs256');\n\n/**\n * Default options for JWT signature\n */\nconst defaultHeader = { alg: 'HS256', typ: 'JWT' };\n\n/**\n * Return a base64 URL\n *\n * @param {string} data - some data to be base64 encoded\n * @return {string} A base64url encoded string\n */\nfunction base64url (data) {\n  return CryptoJS.enc.Base64\n    .stringify(data)\n    .replace(/=+$/, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\n/**\n * Create a very basic JWT signature\n *\n * @param {Object} data - the data object you want to have signed\n * @param {string} secret - secret to use to sign token with\n * @param {Object} options - JWT header options\n * @return {string} JSON Web Token that has been signed\n */\nfunction sign (data, secret, options = {}) {\n  const header = Object.assign(defaultHeader, options);\n  if (header.alg !== 'HS256' && header.typ !== 'JWT') {\n    throw new Error('jwt-encode only support the HS256 algorithm and the JWT type of hash');\n  }\n\n  const encodedHeader = encode(header);\n  const encodedData = encode(data);\n\n  let signature = `${encodedHeader}.${encodedData}`;\n  signature = CryptoJS.HmacSHA256(signature, secret);\n  signature = base64url(signature);\n  return `${encodedHeader}.${encodedData}.${signature}`;\n}\n\n/**\n *  Safely base64url encode a JS Object in a way that is UTF-8 safe\n *\n *  @param {Object} Javascript object payload to be encoded\n *  @return {string} utf-8 safe base64url encoded payload\n */\nfunction encode (data) {\n  const stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n  return base64url(stringifiedData);\n}\n\nmodule.exports = sign;\n"]},"metadata":{},"sourceType":"script"}