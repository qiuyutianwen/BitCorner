{"ast":null,"code":"import { SET_CURRENT_USER, LOGIN_USER_FAIL, SIGNUP_USER_FAIL, SIGNUP_USER, UPDATE_PROFILE, FETCH_ALL, CLEARALL, UPDATE_BANK, UPDATE_BALANCE, GET_BALANCE, SEND_MESSAGE, MARKET_PLACE } from '../constants/constant';\nimport setAuthorizationToken from '../utils/validations/setAuthorizationToken';\nimport jwtDecode from 'jwt-decode';\nimport jwtEncode from 'jwt-encode';\nimport * as api from '../api/index';\nimport { getFromOrders } from './orderActions';\nexport const loginUser = user => async dispatch => {\n  try {\n    // await dispatch(setCurrentUser({username: \"laozhang@gmail.com\"}));\n    console.log('userData', user);\n    const {\n      data,\n      status\n    } = await api.loginUser(user);\n    console.log('After data', data);\n\n    if (status === 201) {\n      alert(data);\n    } else {\n      const token = jwtEncode(data, \"cmpe275\");\n      localStorage.setItem('id', data.id); // to do: add to redux?\n\n      localStorage.setItem('jwtToken', token);\n      await dispatch(setCurrentUser(data));\n      await dispatch(getFromOrders(data.username));\n    } //get current price\n\n  } catch (error) {\n    console.log(error);\n    alert('Login Failed. \\nPlease check your credential or verify your account.');\n  }\n};\nexport const setCurrentUser = user => {\n  return {\n    type: SET_CURRENT_USER,\n    user\n  };\n};\nexport const clearAll = info => {\n  return {\n    type: CLEARALL,\n    payload: info\n  };\n};\nexport const logout = history => {\n  return dispatch => {\n    localStorage.removeItem('jwtToken');\n    setAuthorizationToken(false);\n    dispatch(clearAll({}));\n    history.push('/');\n  };\n};\nexport const loginFail = msg => {\n  return {\n    type: LOGIN_USER_FAIL,\n    msg\n  };\n};\nexport const signupUser = (user, history) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.signupUser(user);\n    console.log('sign up data:', data);\n    dispatch(signUpUser({\n      success: 'Signup successfully!'\n    }));\n    history.push('/');\n  } catch (error) {\n    alert(\"Signup fail with duplicate email or nickname\");\n  }\n};\nexport const signUpUserFail = msg => {\n  return {\n    type: SIGNUP_USER_FAIL,\n    msg\n  };\n};\nexport const signUpUser = msg => {\n  return {\n    type: SIGNUP_USER,\n    msg\n  };\n};\nexport const update = (userData, userID) => async dispatch => {\n  try {\n    console.log('userData', userData);\n    const {\n      data,\n      status\n    } = await api.updateUser(userData, userID);\n    console.log('update', data);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const addBank = (userBank, history) => async dispatch => {\n  try {\n    console.log('userBank', userBank);\n    const {\n      data\n    } = await api.addBankInfo(userBank);\n    console.log('update', data);\n    await dispatch({\n      type: UPDATE_BANK,\n      payload: data\n    });\n    alert(\"Add Bank Successfully!\");\n    history.push('/dashboard/board');\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getUsers = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchUsers();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updateBalance = balanceInfo => async dispatch => {\n  try {\n    const {\n      data,\n      status\n    } = await api.changeBalance(balanceInfo);\n    console.log(\"update balance\", data, status);\n    dispatch({\n      type: UPDATE_BALANCE,\n      payload: data\n    });\n  } catch (error) {\n    alert(\"You do not have enough balance to withdraw.\");\n    console.log(error.message);\n  }\n};\nexport const getFromBalance = user => async dispatch => {\n  try {\n    console.log('inside getFromBalance', user);\n    const {\n      data\n    } = await api.getBalance(user);\n    console.log('getFromBalance', data);\n    dispatch({\n      type: GET_BALANCE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const sendToMessage = messageInfo => async dispatch => {\n  try {\n    console.log('inside sendToMessage', messageInfo);\n    const {\n      data\n    } = await api.sendMessage(messageInfo);\n    console.log('sendToMessage', data);\n    dispatch({\n      type: SEND_MESSAGE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getFromMarketPlace = () => async dispatch => {\n  try {\n    console.log('inside getFromMarketPlace');\n    const {\n      data\n    } = await api.getMarketPlace();\n    console.log('getFromMarketPlace', data);\n    dispatch({\n      type: MARKET_PLACE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/qiuyutianwen/Documents/GitHub/BitCorner/frontend/src/actions/authActions.js"],"names":["SET_CURRENT_USER","LOGIN_USER_FAIL","SIGNUP_USER_FAIL","SIGNUP_USER","UPDATE_PROFILE","FETCH_ALL","CLEARALL","UPDATE_BANK","UPDATE_BALANCE","GET_BALANCE","SEND_MESSAGE","MARKET_PLACE","setAuthorizationToken","jwtDecode","jwtEncode","api","getFromOrders","loginUser","user","dispatch","console","log","data","status","alert","token","localStorage","setItem","id","setCurrentUser","username","error","type","clearAll","info","payload","logout","history","removeItem","push","loginFail","msg","signupUser","signUpUser","success","signUpUserFail","update","userData","userID","updateUser","message","addBank","userBank","addBankInfo","getUsers","fetchUsers","updateBalance","balanceInfo","changeBalance","getFromBalance","getBalance","sendToMessage","messageInfo","sendMessage","getFromMarketPlace","getMarketPlace"],"mappings":"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","sourcesContent":["import {\n\tSET_CURRENT_USER,\n\tLOGIN_USER_FAIL,\n\tSIGNUP_USER_FAIL,\n\tSIGNUP_USER,\n\tUPDATE_PROFILE,\n\tFETCH_ALL,\n\tCLEARALL,\n\tUPDATE_BANK,\n\tUPDATE_BALANCE,\n\tGET_BALANCE,\n\tSEND_MESSAGE,\n\tMARKET_PLACE\n} from '../constants/constant';\nimport setAuthorizationToken from '../utils/validations/setAuthorizationToken';\nimport jwtDecode from 'jwt-decode';\nimport jwtEncode from 'jwt-encode'\nimport * as api from '../api/index';\nimport { getFromOrders } from './orderActions';\n\nexport const loginUser = (user) => async (dispatch) => {\n\ttry {\n\t\t// await dispatch(setCurrentUser({username: \"laozhang@gmail.com\"}));\n\t\tconsole.log('userData', user);\n\t\tconst { data, status } = await api.loginUser(user);\n\t\tconsole.log('After data', data);\n\t\tif (status === 201) {\n\t\t\talert(data);\n\t\t} else {\n\t\t\tconst token = jwtEncode(data, \"cmpe275\")\n\t\t\tlocalStorage.setItem('id', data.id); // to do: add to redux?\n\t\t\tlocalStorage.setItem('jwtToken', token);\n\t\t\tawait dispatch(setCurrentUser(data));\n\t\t\tawait dispatch(getFromOrders(data.username));\n\t\t}\n\t\t//get current price\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\talert(\n\t\t\t'Login Failed. \\nPlease check your credential or verify your account.'\n\t\t);\n\t}\n};\n\nexport const setCurrentUser = (user) => {\n\treturn {\n\t\ttype: SET_CURRENT_USER,\n\t\tuser,\n\t};\n};\n\nexport const clearAll = (info) => {\n\treturn {\n\t\ttype: CLEARALL,\n\t\tpayload: info,\n\t};\n};\n\nexport const logout = (history) => {\n\treturn (dispatch) => {\n\t\tlocalStorage.removeItem('jwtToken');\n\t\tsetAuthorizationToken(false);\n\t\tdispatch(clearAll({}));\n\t\thistory.push('/');\n\t};\n};\n\nexport const loginFail = (msg) => {\n\treturn {\n\t\ttype: LOGIN_USER_FAIL,\n\t\tmsg,\n\t};\n};\n\nexport const signupUser = (user, history) => async (dispatch) => {\n\ttry {\n\t\tconst { data} = await api.signupUser(user);\n\t\tconsole.log('sign up data:', data);\n\t\tdispatch(signUpUser({ success: 'Signup successfully!' }));\n\t\thistory.push('/');\n\t} catch (error) {\n\t\talert(\"Signup fail with duplicate email or nickname\")\n\t}\n};\n\nexport const signUpUserFail = (msg) => {\n\treturn {\n\t\ttype: SIGNUP_USER_FAIL,\n\t\tmsg,\n\t};\n};\n\nexport const signUpUser = (msg) => {\n\treturn {\n\t\ttype: SIGNUP_USER,\n\t\tmsg,\n\t};\n};\n\nexport const update = (userData, userID) => async (dispatch) => {\n\ttry {\n\t\tconsole.log('userData', userData);\n\t\tconst { data, status } = await api.updateUser(userData, userID);\n\t\tconsole.log('update', data);\n\t\tdispatch({ type: UPDATE_PROFILE, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\nexport const addBank = (userBank, history) => async (dispatch) => {\n\ttry {\n\t\tconsole.log('userBank', userBank);\n\t\tconst { data } = await api.addBankInfo(userBank);\n\t\tconsole.log('update', data);\n\t\tawait dispatch({ type: UPDATE_BANK, payload: data });\n\t\talert(\"Add Bank Successfully!\")\n\t\thistory.push('/dashboard/board')\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\nexport const getUsers = () => async (dispatch) => {\n\ttry {\n\t\tconst { data } = await api.fetchUsers();\n\n\t\tdispatch({ type: FETCH_ALL, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\nexport const updateBalance = (balanceInfo) => async (dispatch) => {\n\ttry {\n\t\tconst { data, status } = await api.changeBalance(balanceInfo);\n\t\tconsole.log(\"update balance\", data, status);\n\t\tdispatch({ type: UPDATE_BALANCE, payload: data });\n\t} catch (error) {\n\t\talert(\"You do not have enough balance to withdraw.\")\n\t\tconsole.log(error.message);\n\t}\n};\n\nexport const getFromBalance = (user) => async (dispatch) => {\n\ttry {\n\n\t\tconsole.log('inside getFromBalance', user);\n\t\tconst { data } = await api.getBalance(user);\n\t\tconsole.log('getFromBalance', data);\n\t\tdispatch({ type: GET_BALANCE, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\nexport const sendToMessage = (messageInfo) => async (dispatch) => {\n\ttry {\n\t\tconsole.log('inside sendToMessage', messageInfo);\n\t\tconst { data } = await api.sendMessage(messageInfo);\n\t\tconsole.log('sendToMessage', data);\n\t\tdispatch({ type: SEND_MESSAGE, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\nexport const getFromMarketPlace = () => async (dispatch) => {\n\ttry {\n\t\tconsole.log('inside getFromMarketPlace', );\n\t\tconst { data } = await api.getMarketPlace();\n\t\tconsole.log('getFromMarketPlace', data);\n\t\tdispatch({ type: MARKET_PLACE, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\n\n"]},"metadata":{},"sourceType":"module"}