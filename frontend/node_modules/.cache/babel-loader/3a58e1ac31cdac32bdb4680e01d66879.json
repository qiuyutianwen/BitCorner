{"ast":null,"code":"var _jsxFileName = \"/Users/qiuyutianwen/Documents/GitHub/BitCorner/frontend/src/pages/userauth/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { loginUser } from \"../../actions/authActions\";\nimport { signInWithGoogle } from \"../../utils/firebase.utils\";\nimport { auth } from \"../../utils/firebase.utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = () => {\n  _s();\n\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    passwd: \"\"\n  });\n  const user = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    console.log(\"user\", user);\n\n    if (user && user.msg && user.msg.length > 0) {\n      alert(user.msg);\n    }\n  }, [user]);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    await dispatch(loginUser(userInfo)); // await dispatch(getUsers())\n    // alert(\"Login successfully!\")\n    // history.push('/dashboard/board')\n    // window.location.replace(\"/dashboard\");\n  }; // const loginGoogle = () => {\n  //   console.log(\"inside google login\");\n  //   var provider = new firebase.auth.GoogleAuthProvider()\n  //   firebase.auth().signInWithPopop(provider).then(function(result){\n  //     var token = result.credential.accesstToken;\n  //     var user = result.user\n  //   }).catch(function(error){\n  //     console.log(\"error\", error);\n  //   })\n  // }\n  // useEffect(() => {\n  //   firebase.auth().onAuthStateChanged(function(user) {\n  //     if(user){\n  //       console.log(\"user\", user);\n  //     }else{\n  //       console.log(\"no user sign in\");\n  //     }\n  //   })\n  // }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      method: \"POST\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formGridEmailLogin\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Username: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          placeholder: \"example@gmail.com\",\n          value: userInfo.username,\n          onChange: e => setUserInfo({ ...userInfo,\n            username: e.target.value\n          }),\n          required: true,\n          name: \"username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-muted\",\n        children: \"We'll never share your info with anyone else.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formGridPasswordLogin\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: userInfo.passwd,\n          onChange: e => setUserInfo({ ...userInfo,\n            passwd: e.target.value\n          }),\n          required: true,\n          name: \"passwd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-muted\",\n        children: [\"Haven't have account?\", /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          children: \"Sign me in!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        type: \"submit\",\n        style: {\n          width: \"250px\"\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      style: {\n        width: \"250px\"\n      },\n      onClick: () => signInWithGoogle(dispatch, history),\n      children: \"Login With Google Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LoginForm, \"QkYt4ffqUxDnP2cCQlKgDYVI0Nw=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/qiuyutianwen/Documents/GitHub/BitCorner/frontend/src/pages/userauth/LoginForm.js"],"names":["React","useState","useEffect","Button","Form","useDispatch","useSelector","useHistory","loginUser","signInWithGoogle","auth","LoginForm","userInfo","setUserInfo","username","passwd","user","state","dispatch","history","console","log","msg","length","alert","onSubmit","e","preventDefault","target","value","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { loginUser } from \"../../actions/authActions\";\nimport { signInWithGoogle } from \"../../utils/firebase.utils\";\nimport { auth } from \"../../utils/firebase.utils\";\n\nconst LoginForm = () => {\n  const [userInfo, setUserInfo] = useState({ username: \"\", passwd: \"\" });\n  const user = useSelector((state) => state.auth);\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(\"user\", user);\n    if (user && user.msg && user.msg.length > 0) {\n      alert(user.msg);\n    }\n  }, [user]);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    await dispatch(loginUser(userInfo));\n    // await dispatch(getUsers())\n    // alert(\"Login successfully!\")\n    // history.push('/dashboard/board')\n    // window.location.replace(\"/dashboard\");\n  };\n\n  // const loginGoogle = () => {\n  //   console.log(\"inside google login\");\n  //   var provider = new firebase.auth.GoogleAuthProvider()\n  //   firebase.auth().signInWithPopop(provider).then(function(result){\n  //     var token = result.credential.accesstToken;\n  //     var user = result.user\n  //   }).catch(function(error){\n  //     console.log(\"error\", error);\n  //   })\n  // }\n\n  // useEffect(() => {\n  //   firebase.auth().onAuthStateChanged(function(user) {\n  //     if(user){\n  //       console.log(\"user\", user);\n  //     }else{\n  //       console.log(\"no user sign in\");\n  //     }\n  //   })\n  // }, [])\n\n  return (\n    <>\n      <Form onSubmit={onSubmit} method=\"POST\">\n        <Form.Group controlId=\"formGridEmailLogin\">\n          <Form.Label>Username: </Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"example@gmail.com\"\n            value={userInfo.username}\n            onChange={(e) =>\n              setUserInfo({ ...userInfo, username: e.target.value })\n            }\n            required\n            name=\"username\"\n          />\n        </Form.Group>\n        <Form.Text className=\"text-muted\">\n          We'll never share your info with anyone else.\n        </Form.Text>\n\n        <Form.Group controlId=\"formGridPasswordLogin\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            value={userInfo.passwd}\n            onChange={(e) =>\n              setUserInfo({ ...userInfo, passwd: e.target.value })\n            }\n            required\n            name=\"passwd\"\n          />\n        </Form.Group>\n        <Form.Text className=\"text-muted\">\n          Haven't have account?\n          <Button variant=\"link\">Sign me in!</Button>\n        </Form.Text>\n        <Button variant=\"danger\" type=\"submit\" style={{ width: \"250px\" }}>\n          Submit\n        </Button>\n      </Form>\n      <p></p>\n      <Button\n        variant=\"primary\"\n        type=\"submit\"\n        style={{ width: \"250px\" }}\n        onClick={() => signInWithGoogle(dispatch, history)}\n      >\n        Login With Google Account\n      </Button>\n    </>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}